#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.0.0.500.6)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    def Material "ProjectMaterial"
    {
        asset inputs:uiImage (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-442.6263, 26.299591)
                    int stackingOrderInSubgraph = 681
                }
            }
        )
        matrix4d inputs:viewMatrix = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-1164.1244, -2.8522937)
                    int stackingOrderInSubgraph = 747
                }
            }
        )
        prepend token outputs:mtlx:surface.connect = </Root/ProjectMaterial/PreviewSurface.outputs:out>
        token outputs:realitykit:vertex
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 23

        def Shader "PreviewSurface"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            color3f inputs:diffuseColor.connect = </Root/ProjectMaterial/TiledImage.outputs:out>
            float inputs:metallic
            float3 inputs:normal
            float inputs:opacity
            float inputs:roughness
            token outputs:out
            float2 ui:nodegraph:node:pos = (93.5, 100.5)
            int ui:nodegraph:node:stackingOrder = 2
        }

        def Shader "TiledImage"
        {
            uniform token info:id = "ND_tiledimage_color3"
            color3f inputs:default
            asset inputs:file = @Materials/texture2d/checkerboard.png@
            asset inputs:file.connect = </Root/ProjectMaterial.inputs:uiImage>
            string inputs:filtertype = "linear"
            float2 inputs:realworldimagesize
            float2 inputs:realworldtilesize
            float2 inputs:texcoord.connect = </Root/ProjectMaterial/Swizzle.outputs:out>
            float2 inputs:uvoffset
            float2 inputs:uvtiling
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-222.70184, 87.38361)
            int ui:nodegraph:node:stackingOrder = 679
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:texcoord"]
        }

        def Shader "TransformMatrix"
        {
            uniform token info:id = "ND_transformmatrix_vector3M4"
            float3 inputs:in.connect = </Root/ProjectMaterial/Position.outputs:out>
            matrix4d inputs:mat.connect = </Root/ProjectMaterial.inputs:viewMatrix>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-977.3294, -52.632404)
            int ui:nodegraph:node:stackingOrder = 734
        }

        def Shader "TransformMatrix_1"
        {
            uniform token info:id = "ND_transformmatrix_vector3M4"
            prepend float3 inputs:in.connect = </Root/ProjectMaterial/TransformMatrix.outputs:out>
            matrix4d inputs:mat.connect = </Root/ProjectMaterial/SurfaceViewToProjection.outputs:viewToProjection>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-758.83466, -46.817165)
            int ui:nodegraph:node:stackingOrder = 741
        }

        def Shader "SurfaceViewToProjection"
        {
            uniform token info:id = "ND_realitykit_surface_view_to_projection"
            matrix4d outputs:viewToProjection
            float2 ui:nodegraph:node:pos = (-968.9795, 49.720257)
            int ui:nodegraph:node:stackingOrder = 745
        }

        def Shader "Swizzle"
        {
            uniform token info:id = "ND_swizzle_vector3_vector2"
            string inputs:channels = "xy"
            float3 inputs:in.connect = </Root/ProjectMaterial/TransformMatrix.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-434.09482, 79.491005)
            int ui:nodegraph:node:stackingOrder = 672
        }

        def Shader "Position"
        {
            uniform token info:id = "ND_position_vector3"
            string inputs:space = "world"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-1167.7046, -61.85069)
            int ui:nodegraph:node:stackingOrder = 739
        }
    }
}

